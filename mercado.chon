{"id":9,"name":"mercado","agents":[{"archClass":"Jason","name":"agenteEstoque","sourceCode":"/* Initial beliefs and rules */\n\n/* Initial goals */\n\n!start.\n\n/* Plans */\n\n+!start <- .print(\"Never Send A Human To Do A Machine's Job!\")."},{"archClass":"Jason","name":"agentePedido","sourceCode":"/* Initial beliefs and rules */\n\n/* Initial goals */\n\n!start.\n\n/* Plans */\n\n+!start <- .print(\"Never Send A Human To Do A Machine's Job!\")."},{"archClass":"Communicator","name":"comunicadorMercado","sourceCode":"// Crencas iniciais\nmyUUID(\"80d9c5b3-5327-4836-b722-7481061aff00\").\ngateway(\"skynet.chon.group\", 5500).\nfornecedorA(\"80d9c5b3-5327-4836-b722-7481061aff0a\").\nfornecedorB(\"uuid-fornecedorB\").\n\n// Objetivos iniciais\n!connect.\n\n// Planos\n+!connect: gateway(Server, Port) & myUUID(ID) <-\n    .print(\"Conectando ao gateway...\");\n    .connectCN(Server, Port, ID);\n    !testComm.\n\n+!testComm: fornecedorA(ComunicadorFornecedorA) & not communication(ok) <-\n    .print(\"Testando comunicacao com FornecedorA...\");\n    .sendOut(ComunicadorFornecedorA, tell, communication(trying));\n    .wait(5000);\n    !testComm.\n\n-!testComm.\n-!connect.\n\n+communication(ok)[source(X)] <-\n    .print(\"Comunicacao estabelecida com \", X).\n\n+pedido(Produto, Quantidade)[source(AgentePedido)] <-\n    .print(\"Recebido pedido do AgentePedido: \", Produto, \" - Quantidade: \", Quantidade);\n    .send(fornecedorA, achieve, responder_pedido(pedido123, Produto, Quantidade));\n    .send(fornecedorB, achieve, responder_pedido(pedido123, Produto, Quantidade)).\n\n+resposta_pedido(PedidoID, Produto, Quantidade, ValorTotal)[source(X)] <-\n    .print(\"Resposta recebida de \", X, \": Pedido \", PedidoID, \" - \", Produto, \" - Quantidade: \", Quantidade, \" - Valor: R$ \", ValorTotal);\n    .send(agentePedido, tell, resposta_pedido(PedidoID, Produto, Quantidade, ValorTotal))."}],"firmwares":[]}