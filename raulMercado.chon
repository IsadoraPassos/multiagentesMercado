{"id":7,"name":"raulMercado","agents":[{"archClass":"Communicator","name":"comunicadorMercado","sourceCode":"myUUID(\"864cc007-5afe-479b-9b87-675a761cde00\").\nfornecedorA(\"864cc007-5afe-479b-9b87-675a761cde01\").\nfornecedorB(\"864cc007-5afe-479b-9b87-675a761cde02\").\ngateway(\"skynet.chon.group\", 5500).\n\n!register.\n\n/* Plans */\n\n+registered: fornecedorA(Uuid) <-\n\t.print(\"I'm registered\");\n\t!connect(Uuid).\n\n+connected(Uuid) <- .print(\"I'm connected to \", Uuid).\n\n+wantToConnect[source(Uuid)]: myUUID(MyUuid) <-\n\t.print(Uuid, \" wants to connect\");\n\t.sendOut(Uuid, tell, connected(MyUuid));\n\t+connected(Uuid);\n\t-wantToConnect.\n\n+!register: gateway(Server,Port) & myUUID(Uuid)  <- \n\t.print(\"Trying to connect to server \", Server, \":\", Port, \" (\", Uuid, \")\");\n\t.connectCN(Server, Port, Uuid);\n\t+registered.\n\n+!connect(Uuid): registered & not connected(U) <- \n\t.print(\"Trying to connect to \", Uuid);\n\t.sendOut(Uuid, tell, wantToConnect);\n\t.wait(5000);\n\t!connect(Uuid).\n\n+!connect(Uuid): registered & connected(U) & Uuid = U <- .print(\"I'm already connected to \", Uuid).\n\n+!achieveOut(To, What): connected(Uuid) <-\n\t.print(\"About to send achieve to UUID: \", Uuid, \". To: \", To, \" | What: \", What);\n\t.sendOut(Uuid, achieve, achieveIn(To, What)).\n\n+!achieveIn(To, What)[source(Uuid)] <-\n\t.print(\"About to send achieve to \", To, \" (UUID: \", Uuid, \"). What: \", What);\n\t.send(To, achieve, What).\n\n+!askOneOut(To, What)[source(From)]: connected(Uuid) <-\n\t.print(\"About to Ask One Out (UUID: \", Uuid, \"). From: \", From, \" | To: \", To, \" | What: \", What);\n\t.sendOut(Uuid, achieve, askOneIn(To, What, From)).\n\n-!askOneOut(To, What) <- .print(\"Ainda nao estou conectado!\").\n\n+!askOneIn(To, What, From)[source(Uuid)] <-\n\t.print(\"About to Ask One In (UUID: \", Uuid, \"). From: \", From, \" | To: \", To, \" | What: \", What);\n\t.send(To, askOne, What, Answer);\n\t.print(\"Received answer: \", Answer);\n\t.sendOut(Uuid, achieve, tell(From, Answer)).\n\n+!tell(To, What)[source(Uuid)] <- \n\t.print(\"About to Tell '\", What, \"' to '\", To, \"'.\");\n\t.send(To, tell, What).\n\n+!moveOut[source(Who)]: connected(Uuid) & myUUID(MyUuid) <-\n\t.print(\"About to move '\", Who, \"' out\");\n\t.moveOut(Uuid, mutualism, Who);\n\t.wait(3000);\n\t.print(\"Moved '\", Who, \"' out\");\n\t.sendOut(Uuid, achieve, tell(Who, moved(MyUuid))).\n\n-!moveOut <- .print(\"Ainda nao estou conectado!\").\n\n+!moveBack(Uuid)[source(Who)] <-\n\t.print(\"About to move '\", Who, \"' back\");\n\t.moveOut(Uuid, mutualism, Who).\n"},{"archClass":"Jason","name":"agenteEstoque","sourceCode":"produtoA(5).\n\n!iniciar.\n\n+produtoA(Qtd): Qtd < 3 <-\n\t.print(\"Preciso de mais produto A\");\n\t.send(agentePedido, achieve, precisaDeProdutoA).\n\n+!iniciar: produtoA(QtdA) <- \n\t.print(\"Quantidade A: \", QtdA);\n\t.wait(2000);\n\t!iniciarConsumos.\n\n+!iniciarConsumos <- \n\t!consumirA;\n\t.wait(1000);\n\t!iniciarConsumos.\n\n+!consumirA: produtoA(Qtd) & Qtd > 0 <- \n\t.print(\"Consumindo A\");\n\t.print(\"Quantidade de A restante: \", Qtd - 1);\n\t-+produtoA(Qtd - 1).\n\n+!consumirA: produtoA(Qtd) & Qtd = 0 <- \n\t.print(\"Nao temos estoque do produto A para consumir.\");\n\t.send(agentePedido, achieve, precisaDeProdutoA).\n\n+!receberProdutoA(Qtd): produtoA(QtdAtual) <- \n\t.print(\"Recebi o produto A. Quantidade atual: \", QtdAtual + Qtd);\n\t-+produtoA(QtdAtual + Qtd).\n"},{"archClass":"Jason","name":"agentePedido","sourceCode":"chainServer(\"http://testchain.chon.group:9984/\").\n\n/* carteira(CHAVE-PRIVADA, CHAVE-PUBLICA) */\nmyWallet(\"2eRFEQRq9vNqdPZi9tKyg115RGvhgyjuah9EgNDWHmp7\",\"D34qTAJzjau1U6BxcUauKqNiYyLNKTcKNMtUnQBz9rjV\").\ncryptocurrency(\"cfc4c2a63e888523249ea3d0fba1575106b944292b3ae2d6e3a0f880ca86442c\").\n\n+!pagarPedido <- \n\t\n\n!start.\n\n/* Plans */\n\n+!precisaDeProdutoA <- +precisaDeProdutoA.\n\n+precisaDeProdutoA: not comprandoProdutoA <-\n\t+comprandoProdutoA;\n\t.print(\"Comprando produto A\");\n\t.send(comunicadorMercado, achieve, achieveOut(fornecedor, consultarProdutoA(7))).\n\n+!fornecedorComEstoque(Preco, ChavePix): comprandoProdutoA <-\n\t.print(\"O fornecedor tem o produto A | valor: \", Preco);\n\t?cryptocurrency(Coin);\n\t?chainServer(Server);\n\t?myWallet(MyPriv,MyPub);\n\t.print(\"Realizando o pagamento.\");\n\t.velluscinum.transferToken(Server, MyPriv, MyPub, Coin, ChavePix, Preco, pix);\n\t.wait(pix(CodPix));\n\t.send(comunicadorMercado, achieve, achieveOut(fornecedor, comprarProdutoA(7, CodPix))).\n\n+!fornecedorSemEstoque: comprandoProdutoA <-\n\t.print(\"O fornecedor nao tem o produto A\");\n\t-precisaDeProdutoA;\n\t-comprandoProdutoA.\n\n+!receberProdutoA(Qtd): comprandoProdutoA <- \n\t.print(\"Recebi o produto A. Quantidade: \", Qtd);\n\t.send(agenteEstoque, achieve, receberProdutoA(Qtd));\n\t.wait(1000);\n\t-precisaDeProdutoA;\n\t-comprandoProdutoA."}],"firmwares":[]}