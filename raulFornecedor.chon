{"id":29,"name":"raulFornecedor","agents":[{"archClass":"Communicator","name":"comunicadorFornecedor","sourceCode":"myUUID(\"864cc007-5afe-479b-9b87-675a761cde01\").\ngateway(\"skynet.chon.group\", 5500).\n\n!register.\n\n/* Plans */\n\n+registered <-\n\t.print(\"I'm registered\").\n\n+connected(Uuid) <- .print(\"I'm connected to \", Uuid).\n\n+wantToConnect[source(Uuid)]: myUUID(MyUuid) <-\n\t.print(Uuid, \" wants to connect\");\n\t.sendOut(Uuid, tell, connected(MyUuid));\n\t+connected(Uuid);\n\t-wantToConnect.\n\n+!register: gateway(Server,Port) & myUUID(Uuid)  <- \n\t.print(\"Trying to connect to server \", Server, \":\", Port, \" (\", Uuid, \")\");\n\t.connectCN(Server, Port, Uuid);\n\t+registered.\n\n+!connect(Uuid): registered & not connected(U) <- \n\t.print(\"Trying to connect to \", Uuid);\n\t.sendOut(Uuid, tell, wantToConnect);\n\t.wait(5000);\n\t!connect(Uuid).\n\n+!connect(Uuid): registered & connected(U) & Uuid = U <- .print(\"I'm already connected to \", Uuid).\n\n+!achieveOut(To, What): connected(Uuid) <-\n\t.print(\"About to send achieve to UUID: \", Uuid, \". To: \", To, \" | What: \", What);\n\t.sendOut(Uuid, achieve, achieveIn(To, What)).\n\n+!achieveIn(To, What)[source(Uuid)] <-\n\t.print(\"About to send achieve to \", To, \" (UUID: \", Uuid, \"). What: \", What);\n\t.send(To, achieve, What).\n\n+!askOneOut(To, What)[source(From)]: connected(Uuid) <-\n\t.print(\"About to Ask One Out (UUID: \", Uuid, \"). From: \", From, \" | To: \", To, \" | What: \", What);\n\t.sendOut(Uuid, achieve, askOneIn(To, What, From)).\n\n-!askOneOut(To, What) <- .print(\"Ainda nao estou conectado!\").\n\n+!askOneIn(To, What, From)[source(Uuid)] <-\n\t.print(\"About to Ask One In (UUID: \", Uuid, \"). From: \", From, \" | To: \", To, \" | What: \", What);\n\t.send(To, askOne, What, Answer);\n\t.print(\"Received answer: \", Answer);\n\t.sendOut(Uuid, achieve, tell(From, Answer)).\n\n+!tell(To, What)[source(Uuid)] <- \n\t.print(\"About to Tell '\", What, \"' to '\", To, \"'.\");\n\t.send(To, tell, What).\n\n+!moveOut[source(Who)]: connected(Uuid) & myUUID(MyUuid) <-\n\t.print(\"About to move '\", Who, \"' out\");\n\t.moveOut(Uuid, mutualism, Who);\n\t.wait(3000);\n\t.print(\"Moved '\", Who, \"' out\");\n\t.sendOut(Uuid, achieve, tell(Who, moved(MyUuid))).\n\n-!moveOut <- .print(\"Ainda nao estou conectado!\").\n\n+!moveBack(Uuid)[source(Who)] <-\n\t.print(\"About to move '\", Who, \"' back\");\n\t.moveOut(Uuid, mutualism, Who).\n"},{"archClass":"Jason","name":"fornecedor","sourceCode":"chainServer(\"http://testchain.chon.group:9984/\").\ncryptocurrency(\"cfc4c2a63e888523249ea3d0fba1575106b944292b3ae2d6e3a0f880ca86442c\").\n\nultimoPedido(0).\n\nprodutoA(15).\nprecoA(3).\n\n!createWallet.\n\n+!createWallet <-\n\t.print(\"Gerando carteira digital\");\n\t.velluscinum.buildWallet(myWallet).\n\n+!consultarProdutoA(Qtd): produtoA(QtdAtual) & QtdAtual >= Qtd <-\n\t.print(\"Consultar produto A | Qtd atual: \", QtdAtual, \" | Qtd necessaria: \", Qtd);\n\t.wait(myWallet(Priv,Pub));\n\t?precoA(Preco);\n\t.send(comunicadorFornecedor, achieve, achieveOut(agentePedido, fornecedorComEstoque(Preco, Pub))).\n\n+!consultarProdutoA(Qtd): produtoA(QtdAtual) & QtdAtual < Qtd <-\n\t.print(\"Quantidade do produto A insuficiente | Qtd atual: \", QtdAtual, \" | Qtd necessaria: \", Qtd);\n\t.send(comunicadorFornecedor, achieve, achieveOut(agentePedido, fornecedorSemEstoque)).\n\n+!comprarProdutoA(Qtd, CodPix): produtoA(QtdAtual) & QtdAtual >= Qtd & chainServer(Server) & myWallet(MyPriv, MyPub) <-\n\t?ultimoPedido(N);\n\tNrPedido=N+1;\n\t-+ultimoPedido(NrPedido);\n\t.print(\"Recebi pedido \", NrPedido);\n\t//.velluscinum.stampTransaction(Server, MyPriv, MyPub, CodPix, pagamento(NrPedido));\n\t.print(\"Vendendo produto A | Qtd atual: \", QtdAtual, \" | Qtd necessaria: \", Qtd);\n\t.send(comunicadorFornecedor, achieve, achieveOut(agentePedido, receberProdutoA(Qtd)));\n\t-+produtoA(QtdAtual - Qtd).\n\n+!comprarProdutoA(Qtd, CodPix): produtoA(QtdAtual) & QtdAtual < Qtd <- !consultarProdutoA(Qtd).\n\n-!comprarProdutoA."}],"firmwares":[]}